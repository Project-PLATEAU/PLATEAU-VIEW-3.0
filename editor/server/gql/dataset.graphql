type DatasetSchema implements Node {
  id: ID!
  source: String!
  name: String!
  sceneId: ID!
  fields: [DatasetSchemaField!]!
  totalCount: Int!
  representativeFieldId: ID
  dynamic: Boolean
  datasets( first: Int, last: Int, after: Cursor, before: Cursor): DatasetConnection!
  scene: Scene
  representativeField: DatasetSchemaField
}

type DatasetSchemaField implements Node {
  id: ID!
  source: String!
  name: String!
  type: ValueType!
  schemaId: ID!
  refId: ID
  schema: DatasetSchema
  ref: DatasetSchema
}

type Dataset implements Node {
  id: ID!
  source: String!
  schemaId: ID!
  fields: [DatasetField!]!
  schema: DatasetSchema
  name: String
}

type DatasetField {
  fieldId: ID!
  schemaId: ID!
  source: String!
  type: ValueType!
  value: Any
  schema: DatasetSchema
  field: DatasetSchemaField
  valueRef: Dataset
}

# InputType

input SyncDatasetInput {
  sceneId: ID!
  url: String!
}

input UpdateDatasetSchemaInput {
  schemaId: ID!
  name: String!
}

input RemoveDatasetSchemaInput {
  schemaId: ID!
  force: Boolean
}


input ImportDatasetInput {
  file: Upload!
  sceneId: ID!
  datasetSchemaId: ID
}

input ImportDatasetFromGoogleSheetInput {
  accessToken: String!
  fileId: String!
  sheetName: String!
  sceneId: ID!
  datasetSchemaId: ID
}

input AddDatasetSchemaInput {
  sceneId: ID!
  name: String!
  representativefield: ID
}

# Payload

type SyncDatasetPayload {
  sceneId: ID!
  url: String!
  datasetSchema: [DatasetSchema!]!
  dataset: [Dataset!]!
}

type UpdateDatasetSchemaPayload {
  datasetSchema: DatasetSchema
}

type RemoveDatasetSchemaPayload {
  schemaId: ID!
}

type ImportDatasetPayload {
  datasetSchema: DatasetSchema!
}

type AddDatasetSchemaPayload {
  datasetSchema: DatasetSchema
}

# Connection

type DatasetSchemaConnection {
  edges: [DatasetSchemaEdge!]!
  nodes: [DatasetSchema]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DatasetSchemaEdge {
  cursor: Cursor!
  node: DatasetSchema
}

type DatasetConnection {
  edges: [DatasetEdge!]!
  nodes: [Dataset]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DatasetEdge {
  cursor: Cursor!
  node: Dataset
}

extend type Query{
  datasetSchemas(sceneId: ID!, first: Int, last: Int, after: Cursor, before: Cursor): DatasetSchemaConnection!
  datasets(datasetSchemaId: ID!, first: Int, last: Int, after: Cursor, before: Cursor): DatasetConnection!
}

extend type Mutation {
  updateDatasetSchema(input: UpdateDatasetSchemaInput!): UpdateDatasetSchemaPayload
  syncDataset(input: SyncDatasetInput!): SyncDatasetPayload
  removeDatasetSchema(input: RemoveDatasetSchemaInput!): RemoveDatasetSchemaPayload
  importDataset(input: ImportDatasetInput!): ImportDatasetPayload
  importDatasetFromGoogleSheet(input: ImportDatasetFromGoogleSheetInput!): ImportDatasetPayload
  addDatasetSchema(input: AddDatasetSchemaInput!): AddDatasetSchemaPayload
}
